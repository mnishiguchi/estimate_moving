require 'rails_helper'

RSpec.feature "HouseholdItems", type: :feature do

  before(:each) do
    @user = FactoryGirl.create(:user)

    # Create three movings on the user.
    moving = @user.movings.create(FactoryGirl.attributes_for(:moving))

    # Create five items on the user's first moving.
    3.times do
      moving.household_items.create(FactoryGirl.attributes_for(:household_item))
    end

    # Add a tag on some items.
    moving.household_items.sample.tags.create! name: "ruby"
    moving.household_items.sample.tags.create! name: "rails"

    # Log in and visit the root path.
    login_as @user, scope: :user
    visit root_path

    # Click the link to the first moving.
    click_link moving.name
  end

  let(:moving) { @user.movings.first }

  it { expect(page).to have_title(full_title(moving.name)) }

  describe "moving info" do
    subject { page }

    it { is_expected.to have_content(moving.name) }
    it { is_expected.to have_content(moving.description) }
    it { is_expected.to have_content(moving.volume_unit_string) }
    it { is_expected.to have_link("settings", href: edit_moving_path(moving)) }
    it { is_expected.to have_link("Add item", href: new_moving_household_item_path(moving)) }

    context "clicking the 'Settings' link" do
      before(:each) do
        click_link("settings")
      end

      it { is_expected.to have_title("Edit moving") }
    end

    context "clicking the 'Add item' link" do
      before(:each) do
        click_link("Add item")
      end

      it { is_expected.to have_title("New household item") }
    end
  end

  # ---
  # ---

  describe "chart" do
    subject { page }

    it { is_expected.to have_selector('#moving_volume_chart') }

    # # TODO: Cannot log in using javascript_driver. I do not know why.
    # # I want to access the chart that is generated by HighCharts.js.
    # it "has a chart correctly rendered", js: true do
    #   within "#moving_volume_chart" do
    #     is_expected.to have_selector('.highcharts-container')
    #   end
    # end
  end

  # ---
  # ---

  describe "stats" do
    subject { page }

    it "shows data in correct format" do
      within(".moving_stats") do
        is_expected.to have_content("All items")
        is_expected.to have_content(moving.volume_unit_string)
        is_expected.to have_content(/\d+.*(ft3|m3)/)
        is_expected.to have_content(/\d+.*pcs/)
      end
    end
  end

  # ---
  # ---

  describe "filter forms component" do
    subject { page }

    it "has correct tags that are capitalized" do
      within(".household_item_filter") do
        is_expected.to have_content("All")
        is_expected.to have_content("Ruby")
        is_expected.to have_content("Rails")
      end
    end
  end

  # ---
  # ---

  describe "table component" do
    subject { page }

    let(:item_count) { moving.household_items.count }

    it { is_expected.to have_selector('table') }
    it { is_expected.to have_selector('table tbody tr', count: item_count) }
  end
end
