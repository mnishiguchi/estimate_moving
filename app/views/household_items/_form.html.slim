-# Requires:
-# * moving
-# * household_item

/ This is a nested route.
= simple_form_for([moving, household_item]) do |f|
  table[style="width: 100%;"]
    tbody
      tr
        td = f.input :name, error: false, class: "form-control", placeholder: "Name" 
        td = f.input :volume, input_html: { min: '0', step: 'any' }, error: false, class: "form-control"
        td = f.input :quantity, input_html: { min: '1', step: '1', value: '1' }, error: false, class: "form-control"
      tr
        td[colspan=3] 
          = f.input :all_tags, placeholder: "Tags separated by tags", label: false, class: "form-control"
      tr
        td[colspan=3] 
          = f.input :description, placeholder: "Description", label: false, class: "form-control"
    
  .form-group
    button[data-target="#volumeCalculatorModal" data-toggle="modal" type="button" ] Open volume calculator
    = f.submit submit_text, class: 'btn btn-primary pull-right'
    .clearfix


  .modal.fade#volumeCalculatorModal[tabindex="-1" role="dialog"]
    .modal-dialog
      .modal-content
        .modal-header
          button.close[type="button" data-dismiss="modal" aria-label="Close"]
            span[aria-hidden="true"]
              | Ã—
          h4.modal-title
            | Volume calculator
        .modal-body
          p Please enter three values in #{moving.length_unit_string}.
          .form-group
            .row
              .col-xs-4
                label[for="length"] Length
                input.form-control[type="number" name="length"] 
              .col-xs-4
                label[for="width"] Width
                input.form-control[type="number" name="width"] 
              .col-xs-4
                label[for="height"] Height
                input.form-control[type="number" name="height"]

        .modal-footer
          .help-block
            .result
              | Calculation result will be inserted into the volume field automatically.
          button.btn.btn-default[type="button" data-dismiss="modal"]
            | Close
          button.btn.btn-primary#calculate[type="button"]
            | Calculate
  
css:
  #toggle_calculator {
    display: block;
    margin-bottom: 1rem;
  }

javascript:
  // I use inline javascript because I want to enbed data into javascript at server side.
  // Also this script is only used for this particular HTML component.
  $(document).on('turbolinks:load', function(){
  
    // Set up autocomplete.
    autocompleteNameAndVolume()
    autocompleteTags()
    
    // Set up volume calculator.
    setUpVolumeCalculator()
    
    //---
    //---
    
    function autocompleteNameAndVolume() {
      // Write the item-volume-json data directly on the HTML at server side.
      // The data is an object of key-value pairs (name: volume)
      var data = #{raw item_volume_json(@moving)} //<== Ruby
      var itemNames = Object.keys(data)
    
      // Configure the autocomplete.
      $('#household_item_name').autocomplete({
        source: itemNames,
        select: onSelect
      });
      
      // Invoked when an autocomplete list item is clicked.
      function onSelect(e, ui) {
        setVolume(data[ui.item.value])
      }
    }

    function autocompleteTags() {
      // Write the tag_names data directly on the HTML at server side.
      // The data is an array of strings.
      var tagNames = #{raw @moving.tags.map(&:name)} //<== Ruby

      // Configure the autocomplete.
      $('#household_item_all_tags').autocomplete({
        source: tagNames
      });
    }

    //---
    //---
    
    function setUpVolumeCalculator(){
      $('#toggle_calculator').on('click', function(event){
        $('#calculator').toggle()
        event.preventDefault()
        return false
      })
      
      $('#calculate').on('click', function(event){
      
        // Obtain references to all the fields.
        var $fields = [
          $('input[name="length"]'),
          $('input[name="width"]'),
          $('input[name="height"]')
        ]
        
        // Obtain values from all the fields.
        var $values = $fields.map(function(field){ 
          return Number(field.val()) 
        })
        
        // Calculate the volume if all the values are valid. Else make the result 0.
        var result = 0
        if ($values[0] && $values[1] && $values[2]) {
          result = $values[0] * $values[1] * $values[2] 
        }
        
        // Set the result text on the modal.
        var resultString = [
          "Result inserted into the volume field: ",
          $values[0],
          " x ",
          $values[1],
          " x ",
          $values[2],
          " = ",
          result,
          " (",
          "#{moving.volume_unit_string}",
          ")"
        ].join("")
        $('#volumeCalculatorModal .result').text(resultString)
      
        // Set the result to the volume field.
        setVolume(result)
      
        // Clear all the fields.
        for (var i = 0; i < 3; i++) {
          $fields[i].val("")
        }
        
        // Close the calculator.
        $('#calculator').hide()
        
        event.preventDefault()
        return false
      })
    }
    
    // Set the specified value on the volume field.
    function setVolume(volume){
      $('#household_item_volume').val(volume)
    }
  });
